import * as React from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { formatDistanceToNow } from "date-fns";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import { ChevronDown, ChevronUp } from "lucide-react";

export type Exploit = {
  id: string;
  name: string;
  date: Date;
  type: "smart-contract" | "protocol" | "bridge" | "flash-loan" | "price-manipulation" | "private-key" | "other";
  impact: "critical" | "high" | "medium" | "low";
  fundsLost: number;
  target: string;
  status: "confirmed" | "suspected" | "resolved";
  description: string;
  technique: string;
  auditedBy: string;
};

export const typeColors = {
  "smart-contract": "bg-amber-100 text-amber-800 hover:bg-amber-200",
  "protocol": "bg-blue-100 text-blue-800 hover:bg-blue-200",
  "bridge": "bg-purple-100 text-purple-800 hover:bg-purple-200",
  "flash-loan": "bg-green-100 text-green-800 hover:bg-green-200",
  "price-manipulation": "bg-red-100 text-red-800 hover:bg-red-200",
  "private-key": "bg-orange-100 text-orange-800 hover:bg-orange-200",
  "other": "bg-gray-100 text-gray-800 hover:bg-gray-200",
} as const;

export const impactColors = {
  "critical": "bg-red-100 text-red-800 border-red-300",
  "high": "bg-orange-100 text-orange-800 border-orange-300",
  "medium": "bg-yellow-100 text-yellow-800 border-yellow-300",
  "low": "bg-green-100 text-green-800 border-green-300",
} as const;

// Mock data for exploit history
// In a real implementation, this would come from an API or database
const mockExploits: Exploit[] = [
  {
    id: "1",
    name: "Wormhole Bridge Hack",
    date: new Date("2022-02-02"),
    type: "bridge",
    impact: "critical",
    fundsLost: 325000000,
    target: "Wormhole Bridge",
    status: "confirmed",
    description: "An attacker exploited a vulnerability in the signature verification process of the Wormhole bridge, resulting in the theft of 120,000 wETH.",
    technique: "Bypass validation of fake signatures to authorize mint of 120k ETH",
    auditedBy: "Neodyme"
  },
  {
    id: "2",
    name: "Mango Markets Price Manipulation",
    date: new Date("2022-10-11"),
    type: "price-manipulation",
    impact: "critical",
    fundsLost: 115000000,
    target: "Mango Markets",
    status: "confirmed",
    description: "An attacker manipulated the price of MNGO token to create artificial collateral and drain protocol funds.",
    technique: "Manipulate $MNGO price to profit from leveraged open long position. Use unrealized PNL to borrow liquidity.",
    auditedBy: "N/A"
  },
  {
    id: "3",
    name: "Cashio Infinite Mint",
    date: new Date("2022-03-23"),
    type: "smart-contract",
    impact: "critical",
    fundsLost: 48000000,
    target: "Cashio",
    status: "confirmed",
    description: "Attacker exploited a vulnerability in the collateral validation system.",
    technique: "Fake Collateral validated correctly",
    auditedBy: "Unaudited"
  },
  {
    id: "4",
    name: "Crema Finance Exploit",
    date: new Date("2022-07-03"),
    type: "smart-contract",
    impact: "high",
    fundsLost: 8800000,
    target: "Crema Finance",
    status: "confirmed",
    description: "Attacker exploited a vulnerability in the account validation system.",
    technique: "Fake Account supplied to issue excess LP fees",
    auditedBy: "Bramah Systems"
  },
  {
    id: "5",
    name: "Slope Wallet Private Key Leak",
    date: new Date("2022-08-02"),
    type: "private-key",
    impact: "high",
    fundsLost: 5000000,
    target: "Slope Wallet",
    status: "confirmed",
    description: "User private keys were compromised leading to unauthorized transfers.",
    technique: "Transferred assets to hacker account using compromised private key",
    auditedBy: "N/A"
  },
  {
    id: "6",
    name: "Raydium Protocol Breach",
    date: new Date("2022-12-16"),
    type: "private-key",
    impact: "medium",
    fundsLost: 4400000,
    target: "Raydium DEX",
    status: "confirmed",
    description: "Admin private key was compromised leading to unauthorized withdrawals.",
    technique: "Illegally withdraw liquidity by using compromised admin's private key",
    auditedBy: "N/A"
  },
  {
    id: "7",
    name: "Nirvana Flash Loan Attack",
    date: new Date("2022-07-28"),
    type: "flash-loan",
    impact: "medium",
    fundsLost: 3500000,
    target: "Nirvana",
    status: "confirmed",
    description: "Flash loan attack used to manipulate price and drain protocol treasury.",
    technique: "Inflate price using flashloan to drain protocol treasury",
    auditedBy: "Sec3 Auto Audit Software"
  },
  {
    id: "8",
    name: "Solend Oracle Attack",
    date: new Date("2022-11-02"),
    type: "price-manipulation",
    impact: "medium",
    fundsLost: 1300000,
    target: "Solend",
    status: "confirmed",
    description: "Price oracle manipulation led to excess borrowing.",
    technique: "Inflated price of collateral to borrow excess liquidity",
    auditedBy: "N/A"
  }
];

function formatCurrency(amount: number): string {
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
    maximumFractionDigits: 0,
  }).format(amount);
}

interface ExploitHistoryTableProps {
  onExploitSelect?: (exploit: Exploit) => void;
  filterType?: Exploit["type"];
}

export function ExploitHistoryTable({ onExploitSelect, filterType }: ExploitHistoryTableProps) {
  const [expandedRows, setExpandedRows] = React.useState<Set<string>>(new Set());

  const toggleRow = (id: string) => {
    const newExpandedRows = new Set(expandedRows);
    if (expandedRows.has(id)) {
      newExpandedRows.delete(id);
    } else {
      newExpandedRows.add(id);
    }
    setExpandedRows(newExpandedRows);
  };

  const handleRowClick = (exploit: Exploit) => {
    if (onExploitSelect) {
      onExploitSelect(exploit);
    }
  };

  const filteredExploits = React.useMemo(() => {
    if (!filterType) return mockExploits;
    return mockExploits.filter(exploit => exploit.type === filterType);
  }, [filterType]);

  return (
    <div className="border rounded-lg overflow-hidden">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead></TableHead>
            <TableHead>Incident</TableHead>
            <TableHead>Date</TableHead>
            <TableHead>Type</TableHead>
            <TableHead>Target</TableHead>
            <TableHead>Impact</TableHead>
            <TableHead className="text-right">Funds Lost</TableHead>
            <TableHead>Status</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {filteredExploits.map((exploit) => (
            <React.Fragment key={exploit.id}>
              <TableRow 
                className="hover:bg-muted/50 cursor-pointer" 
                onClick={() => handleRowClick(exploit)}
              >
                <TableCell className="w-4">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      toggleRow(exploit.id);
                    }}
                    className="p-1 hover:bg-muted rounded"
                  >
                    {expandedRows.has(exploit.id) ? (
                      <ChevronUp className="h-4 w-4" />
                    ) : (
                      <ChevronDown className="h-4 w-4" />
                    )}
                  </button>
                </TableCell>
              <TableCell className="font-medium">{exploit.name}</TableCell>
              <TableCell title={exploit.date.toDateString()}>
                {formatDistanceToNow(exploit.date, { addSuffix: true })}
              </TableCell>
              <TableCell>
                <Badge 
                  variant="outline" 
                  className={typeColors[exploit.type]}
                >
                  {exploit.type.replace("-", " ")}
                </Badge>
              </TableCell>
              <TableCell>{exploit.target}</TableCell>
              <TableCell>
                <Badge className={impactColors[exploit.impact]}>
                  {exploit.impact}
                </Badge>
              </TableCell>
              <TableCell className="text-right font-mono">
                {formatCurrency(exploit.fundsLost)}
              </TableCell>
              <TableCell>
                <Badge
                  variant={exploit.status === "confirmed" ? "destructive" : 
                         exploit.status === "resolved" ? "outline" : 
                         "secondary"}
                >
                  {exploit.status}
                </Badge>
              </TableCell>
            </TableRow>
              {expandedRows.has(exploit.id) && (
                <TableRow>
                  <TableCell colSpan={8} className="bg-muted/50 p-4">
                    <div className="space-y-2">
                      <div>
                        <span className="font-semibold">Description: </span>
                        {exploit.description}
                      </div>
                      <div>
                        <span className="font-semibold">Technique: </span>
                        {exploit.technique}
                      </div>
                      <div>
                        <span className="font-semibold">Audited by: </span>
                        {exploit.auditedBy}
                      </div>
                    </div>
                  </TableCell>
                </TableRow>
              )}
            </React.Fragment>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}
