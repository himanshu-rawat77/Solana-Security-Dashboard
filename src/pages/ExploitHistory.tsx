import { DashboardHeader } from "@/components/dashboard/DashboardHeader";
import { ExploitHistoryTable, Exploit, typeColors, impactColors } from "@/components/dashboard/ExploitHistoryTable";
// import { Sidebar } from "@/components/dashboard/Sidebar";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import { useState } from "react";

// Helper function to format currency
function formatCurrency(amount: number): string {
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
    maximumFractionDigits: 0,
  }).format(amount);
}

interface ExploitAnalysis {
  overview: string;
  technicalDetails: string;
  timeline: string;
  lessons: string;
  recommendations: string;
}

const mockAnalysis: Record<string, ExploitAnalysis> = {
  "1": {
    overview: `The Wormhole bridge hack was one of the largest exploits in Solana's history, resulting in a loss of $325M. 
    The attacker exploited a vulnerability in the signature verification process, allowing them to mint 120,000 wETH without proper authorization.`,
    technicalDetails: `The exploit involved:
    1. Bypassing signature validation checks
    2. Creating fake system program instructions
    3. Minting unauthorized wETH tokens
    4. Exploiting cross-chain message verification
    
    Technical Root Cause:
    - Vulnerability in signature verification process
    - Lack of proper validation for cross-chain messages
    - Missing checks for system program instructions
    
    Attack Vector:
    - The attacker created specially crafted transactions
    - Exploited the bridge's verification mechanism
    - Successfully minted unauthorized tokens`,
    timeline: `February 2, 2022:
    - 18:24 UTC: Initial suspicious transactions detected
    - 18:41 UTC: Large unauthorized mints observed
    - 19:15 UTC: Bridge operations halted
    - 20:00 UTC: Incident response team engaged
    - 23:00 UTC: Jump Trading steps in to cover losses
    
    February 3, 2022:
    - Security patches developed and tested
    - Bridge operations restored with new safeguards`,
    lessons: `Key lessons from the Wormhole exploit:
    1. Critical importance of signature verification
    2. Need for multiple validation layers
    3. Importance of cross-chain message verification
    4. Value of quick incident response
    5. Significance of having strong backing (Jump Trading)
    6. Need for better monitoring systems`,
    recommendations: `Security recommendations:
    1. Implement multiple signature verification layers
    2. Add time-locks for large transfers
    3. Enhance monitoring systems
    4. Regular security audits
    5. Implement circuit breakers
    6. Add additional validation for cross-chain messages
    7. Regular penetration testing
    8. Improve incident response procedures`
  },
  "2": {
    overview: `The Mango Markets price manipulation attack resulted in a $115M exploit. 
    The attacker manipulated the MNGO token price through market manipulation and used the inflated collateral to drain protocol funds.`,
    technicalDetails: `Attack methodology:
    1. Large position opening in MNGO/USDC
    2. Price manipulation through market orders
    3. Using inflated collateral for borrowing
    4. Draining protocol liquidity
    
    Technical Details:
    - Exploited oracle price feed vulnerabilities
    - Manipulated market prices through low liquidity
    - Used leverage to amplify position impact
    - Executed coordinated trades across multiple accounts`,
    timeline: `October 11, 2022:
    - Initial large positions opened
    - Price manipulation detected
    - Protocol funds drained
    - Community governance response initiated
    
    October 12-15, 2022:
    - Negotiations with attacker
    - Governance proposals for resolution
    - Recovery plan implementation`,
    lessons: `Lessons learned:
    1. Vulnerability of oracle price feeds
    2. Risks of low liquidity markets
    3. Impact of large position sizes
    4. Importance of circuit breakers
    5. Need for better risk management
    6. Value of community governance`,
    recommendations: `Preventive measures:
    1. Implement price deviation checks
    2. Add position size limits
    3. Enhance liquidation mechanisms
    4. Regular risk assessments
    5. Improve oracle security
    6. Add market manipulation safeguards
    7. Implement better monitoring tools`
  },
  "3": {
    overview: `The Cashio protocol hack resulted in a loss of $48M through an exploit of the collateral validation system. 
    Cashio, a decentralized stablecoin protocol on Solana that manages the $CASH stablecoin (pegged 1:1 to USD), was compromised when an attacker exploited a vulnerability in the collateral verification process.`,
    technicalDetails: `The exploit methodology:
    1. Hacker exploited the protocol's $CASH minting code by depositing fake invaluable collateral
    2. Used this to mint 2 billion valuable $CASH tokens
    3. Burned part of these fake $CASH tokens to get USDC-USDT LP tokens
    4. Swapped the collateral LP tokens on Saber for real value
    
    Technical Root Cause:
    - Vulnerability in the Brr program's print_cash instruction
    - Failed to check the validity of the "Bank" account
    - Attacker could create fake bank account and transfer fake collateral
    - Only basic association checks between Bank and Collateral accounts
    
    Attack Vector:
    - Created fake Bank and Collateral accounts
    - Bypassed validation checks using fake accounts
    - Successfully minted unauthorized tokens`,
    timeline: `March 23, 2022:
    - Initial attack transaction executed
    - 2 billion $CASH tokens minted
    - LP tokens extracted and swapped
    - Funds converted to various stablecoins
    
    Post-Exploit:
    - Protocol operations halted
    - $CASH value plummeted to $0.0005
    - Hacker identified as "Robin Hood"
    - Some funds returned to affected users`,
    lessons: `Key lessons from the Cashio exploit:
    1. Critical importance of account validation
    2. Need for comprehensive security checks
    3. Importance of proper collateral verification
    4. Risk of fake account creation
    5. Value of proper input validation
    6. Need for multiple security layers`,
    recommendations: `Security recommendations:
    1. Implement proper Bank account validation
    2. Add assert_keys_eq check for crate_mint
    3. Enhance account validation logic
    4. Add multiple security checkpoints
    5. Implement proper collateral verification
    6. Regular security audits
    7. Enhanced monitoring systems`
  },
  "4": {
    overview: `Crema Finance, a concentrated liquidity protocol on Solana, was exploited for $8.8M through a vulnerability in their fee calculation system. 
    The attack leveraged flash loans and manipulated the protocol's tick account system to extract unauthorized LP fees.`,
    technicalDetails: `Attack methodology:
    1. Created fake Tick account with manipulated data
    2. Executed flash loan attacks from multiple sources
    3. Deposited borrowed assets into Crema pools
    4. Claimed excessive LP fees using fake tick data
    5. Withdrew liquidity and repaid flash loans
    
    Technical Details:
    - Exploited Tick account validation vulnerability
    - Used multiple flash loans from various protocols
    - Created sophisticated batch transactions
    - Chained multiple deposit/claim/withdraw cycles
    
    Flash Loans Used:
    - 3,000 stSOL
    - 5,500,000 USDT
    - 10,500 mSOL
    - 57,000 stSOL
    - 840,000 PAI
    - 400,000 USDH`,
    timeline: `July 3, 2022:
    - Attack initiated with flash loans
    - Multiple exploit transactions executed
    - Funds converted to SOL and USDCet
    - Protocol operations suspended
    
    Post-Exploit:
    - Team negotiated with hacker
    - $8.3M returned by attacker
    - Compensation plan drafted`,
    lessons: `Key lessons from the Crema exploit:
    1. Importance of tick account validation
    2. Risks of flash loan attacks
    3. Need for better fee calculation security
    4. Value of proper account validation
    5. Impact of batch transaction vulnerabilities`,
    recommendations: `Security recommendations:
    1. Enhance tick account validation
    2. Implement flash loan protection
    3. Add multiple security layers
    4. Improve fee calculation logic
    5. Regular security audits
    6. Enhanced monitoring systems`
  },
  "5": {
    overview: `The Slope Wallet hack resulted in the compromise of 9,231 wallets and the loss of approximately $4.1M in assets. 
    The incident stemmed from a critical security flaw in Slope's mobile wallet implementation, specifically in how it handled sensitive data logging.`,
    technicalDetails: `Attack Vector:
    1. Slope's mobile wallet accidentally logged private keys
    2. Sensitive data sent to Slope's self-hosted Sentry server
    3. Hacker obtained private keys from logs
    4. Used compromised keys to drain wallets
    
    Technical Root Cause:
    - Improper filtering of sensitive data in Sentry logs
    - Navigation events contained unfiltered wallet data
    - Private keys exposed in plaintext
    - Self-hosted Sentry server compromise
    
    Affected Systems:
    - Slope mobile wallets (iOS and Android)
    - Some Phantom wallets (using same seed phrase)
    - Cross-chain impacts (Ethereum wallets)`,
    timeline: `August 2, 2022:
    - 11 PM UTC: Initial reports of funds being drained
    - Users report unauthorized transactions
    - Community investigation begins
    - Slope identified as source
    
    August 3-4, 2022:
    - Official investigation results
    - Root cause identified
    - Slope issues official statement`,
    lessons: `Key lessons from the Slope hack:
    1. Importance of secure logging practices
    2. Risks of self-hosted monitoring services
    3. Need for proper data filtering
    4. Impact of supply chain attacks
    5. Importance of seed phrase security
    6. Value of proper error monitoring`,
    recommendations: `Security recommendations:
    1. Implement proper log filtering
    2. Secure sensitive data handling
    3. Regular security audits
    4. Enhanced monitoring systems
    5. Improved error handling
    6. Better key management
    7. Regular penetration testing`
  },
  "6": {
    overview: `The Raydium protocol hack resulted in a loss of $4.4M when a hacker gained access to the private key of the "Pool Owner" account. 
    This compromised account had admin authority over liquidity pools, allowing the attacker to withdraw trading fees and manipulate fee parameters.`,
    technicalDetails: `Attack Vector:
    1. Compromised Pool Owner account private key
    2. Withdrew trading fees from multiple pools
    3. Modified fee parameters to increase extractable fees
    4. Withdrew additional funds from manipulated pools
    
    Affected Pools:
    - SOL-USDC
    - SOL-USDT
    - RAY-USDC
    - RAY-USDT
    - RAY-SOL
    - stSOL-USDC
    - ZBC-USDC
    - UXP-USDC
    - whETH-USDC
    
    Assets Stolen:
    - RAY: 1,879,638
    - stSOL: 3,214
    - whETH: 39.3
    - USDC: 1,094,613
    - SOL: 120,512
    - UXP: 21,068,507
    - ZBC: 9,758,647
    - USDT: 110,427`,
    timeline: `December 16, 2022:
    - 2 PM UTC: Hacker executes ~1000 transactions
    - Withdraws liquidity using withdrawPNL instruction
    - Funds bridged to Ethereum
    - Converted to ETH and deposited into Tornado Cash
    - 100k SOL remained in hacker's Solana address
    
    Post-Exploit:
    - Raydium team revokes compromised account access
    - New account created with hardware wallet
    - Protocol upgraded to remove admin parameters`,
    lessons: `Key lessons from the Raydium hack:
    1. Importance of private key security
    2. Risks of centralized admin controls
    3. Need for multi-signature governance
    4. Impact of compromised admin accounts
    5. Value of hardware wallet security`,
    recommendations: `Security recommendations:
    1. Implement multi-signature controls
    2. Use hardware wallets for admin accounts
    3. Remove unnecessary admin functions
    4. Regular security audits
    5. Enhanced monitoring systems
    6. Implement circuit breakers
    7. Regular penetration testing`
  },
  "7": {
    overview: `The Nirvana protocol hack resulted in a $3.5M direct loss from the treasury, with users losing over $10M in total value. 
    The attacker exploited price manipulation vulnerabilities to inflate the price of the $ANA token from $8 to $24, then drained the protocol's treasury.`,
    technicalDetails: `Attack methodology:
    1. Took $10M flash loan from Solend
    2. Purchased 1.17M $ANA tokens
    3. Manipulated price from $8 to $24
    4. Sold overpriced $ANA back to protocol
    5. Repaid flash loan with profits
    
    Technical Impact:
    - Treasury drained of $3.5M
    - $ANA price manipulation
    - NIRV de-pegging
    - Cascading effect on leveraged positions
    
    Attack Flow:
    - Initial treasury: $3.5M
    - Flash loan: $10M
    - Price manipulation: $8 -> $24
    - Treasury drained: $13.5M
    - Net profit: $3.5M after loan repayment`,
    timeline: `July 28, 2022:
    - Flash loan taken from Solend
    - ANA price manipulated
    - Treasury drained
    - Collateral system collapsed
    
    Post-Exploit Impact:
    - $10M+ in user losses
    - Market capitalization collapse
    - Protocol functionality ceased`,
    lessons: `Key lessons from the Nirvana exploit:
    1. Risks of price manipulation
    2. Vulnerability of virtual AMMs
    3. Impact of flash loan attacks
    4. Importance of price curve security
    5. Risks of leveraged positions
    6. Need for better treasury protection`,
    recommendations: `Security recommendations:
    1. Implement price manipulation protection
    2. Add flash loan safeguards
    3. Enhance price curve security
    4. Improve treasury security
    5. Regular security audits
    6. Better monitoring systems
    7. Circuit breakers for price changes`
  },
  "8": {
    overview: `The Solend protocol hack resulted in a $1.26M loss through price manipulation of the $USDH stablecoin. 
    The attacker exploited Solend's reliance on a single price feed from Saber, manipulating the USDH price to borrow against inflated collateral value.`,
    technicalDetails: `Attack Vector:
    1. Price manipulation between Saber and Orca DEXs
    2. Exploited single-source oracle vulnerability
    3. Inflated USDH price from $0.99 to $8.8
    4. Borrowed against inflated collateral
    5. Defaulted on loans
    
    Technical Components:
    - Solend's isolated lending pools
    - Saber DEX for price manipulation
    - Orca DEX for arbitrage
    - Switchboard oracle integration
    
    Attack Methodology:
    - Large USDH purchases on Saber
    - Cross-DEX trading with Orca
    - Network spam to prevent arbitrage
    - Oracle price manipulation`,
    timeline: `October 28, 2022:
    - 2:30 AM: Initial failed attempt
    - Team identifies vulnerability
    
    November 2, 2022:
    - 12:15 AM: First successful price pump
    - 2:16 AM: Second attack, $400k drained
    - 2:53 AM: Third attack, $800k drained
    - 3:37 AM: Team discovers bad debt
    - 3:53 AM: Borrows disabled
    - 4:03 AM: USDH LTVs set to 0`,
    lessons: `Key lessons from the Solend hack:
    1. Risks of single-source oracles
    2. Impact of price manipulation
    3. Importance of arbitrage resistance
    4. Need for multiple price feeds
    5. Value of quick incident response
    6. Risks of isolated pools`,
    recommendations: `Security recommendations:
    1. Implement multiple price feeds
    2. Add price manipulation protection
    3. Enhance oracle security
    4. Improve borrowing controls
    5. Regular security audits
    6. Better monitoring systems
    7. Circuit breakers for price changes`
  }
};

const ExploitHistory = () => {
  const [selectedExploit, setSelectedExploit] = useState<Exploit | null>(null);
  const [selectedTab, setSelectedTab] = useState("all");

  const handleExploitSelect = (exploit: Exploit) => {
    setSelectedExploit(exploit);
  };

  const getFilteredExploits = (tab: string) => {
    if (tab === "all") return undefined;
    return tab as Exploit["type"];
  };

  return (
    <div className="container mx-auto space-y-6 pb-8">
      {/* <Sidebar /> */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* <DashboardHeader /> */}
        <main className="flex-1 overflow-y-auto p-4">
          <div className="container mx-auto space-y-6 pb-8">
            <div className="flex flex-col gap-2">
              <h1 className="text-3xl font-bold">Exploit History</h1>
              <p className="text-muted-foreground">
                Comprehensive database of security incidents in the Solana ecosystem
              </p>
            </div>
            
            <Card>
              <CardHeader>
                <CardTitle>Exploit Database</CardTitle>
                <CardDescription>
                  View and filter historical security incidents on Solana
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Tabs value={selectedTab} onValueChange={setSelectedTab} className="mb-6">
                  <TabsList>
                    <TabsTrigger value="all">All Incidents</TabsTrigger>
                    <TabsTrigger value="smart-contract">Smart Contract</TabsTrigger>
                    <TabsTrigger value="protocol">Protocol</TabsTrigger>
                    <TabsTrigger value="bridge">Bridge</TabsTrigger>
                    <TabsTrigger value="flash-loan">Flash Loan</TabsTrigger>
                    <TabsTrigger value="price-manipulation">Price Manipulation</TabsTrigger>
                    <TabsTrigger value="private-key">Private Key</TabsTrigger>
                  </TabsList>
                  <TabsContent value="all" className="mt-4">
                    <ExploitHistoryTable onExploitSelect={handleExploitSelect} />
                  </TabsContent>
                  <TabsContent value="smart-contract" className="mt-4">
                    <ExploitHistoryTable 
                      onExploitSelect={handleExploitSelect} 
                      filterType={getFilteredExploits("smart-contract")} 
                    />
                  </TabsContent>
                  <TabsContent value="protocol" className="mt-4">
                    <ExploitHistoryTable 
                      onExploitSelect={handleExploitSelect} 
                      filterType={getFilteredExploits("protocol")} 
                    />
                  </TabsContent>
                  <TabsContent value="bridge" className="mt-4">
                    <ExploitHistoryTable 
                      onExploitSelect={handleExploitSelect} 
                      filterType={getFilteredExploits("bridge")} 
                    />
                  </TabsContent>
                  <TabsContent value="flash-loan" className="mt-4">
                    <ExploitHistoryTable 
                      onExploitSelect={handleExploitSelect} 
                      filterType={getFilteredExploits("flash-loan")} 
                    />
                  </TabsContent>
                  <TabsContent value="price-manipulation" className="mt-4">
                    <ExploitHistoryTable 
                      onExploitSelect={handleExploitSelect} 
                      filterType={getFilteredExploits("price-manipulation")} 
                    />
                  </TabsContent>
                  <TabsContent value="private-key" className="mt-4">
                    <ExploitHistoryTable 
                      onExploitSelect={handleExploitSelect} 
                      filterType={getFilteredExploits("private-key")} 
                    />
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>Exploit Details</CardTitle>
                <CardDescription>
                  Technical analysis and root cause breakdown
                </CardDescription>
              </CardHeader>
              <CardContent>
                {selectedExploit ? (
                  <div className="space-y-6">
                    <div className="flex items-center gap-4">
                      <h2 className="text-2xl font-bold">{selectedExploit.name}</h2>
                      <div className="flex gap-2">
                        <Badge variant="outline" className={typeColors[selectedExploit.type]}>
                          {selectedExploit.type.replace("-", " ")}
                        </Badge>
                        <Badge className={impactColors[selectedExploit.impact]}>
                          {selectedExploit.impact}
                        </Badge>
                        <Badge variant="outline">
                          {formatCurrency(selectedExploit.fundsLost)}
                        </Badge>
                      </div>
                    </div>

                    <ScrollArea className="h-[600px] pr-4">
                      <Tabs defaultValue="overview" className="w-full">
                        <TabsList className="w-full">
                          <TabsTrigger value="overview">Overview</TabsTrigger>
                          <TabsTrigger value="technical">Technical Details</TabsTrigger>
                          <TabsTrigger value="timeline">Timeline</TabsTrigger>
                          <TabsTrigger value="lessons">Lessons Learned</TabsTrigger>
                          <TabsTrigger value="recommendations">Recommendations</TabsTrigger>
                        </TabsList>

                        {mockAnalysis[selectedExploit.id] && (
                          <>
                            <TabsContent value="overview" className="mt-4">
                              <Card>
                                <CardHeader>
                                  <CardTitle>Overview</CardTitle>
                                </CardHeader>
                                <CardContent className="space-y-4">
                                  <div className="space-y-2">
                                    <h3 className="font-semibold">Description</h3>
                                    <p>{selectedExploit.description}</p>
                                  </div>
                                  <div className="space-y-2">
                                    <h3 className="font-semibold">Analysis</h3>
                                    <p className="whitespace-pre-line">{mockAnalysis[selectedExploit.id].overview}</p>
                                  </div>
                                </CardContent>
                              </Card>
                            </TabsContent>

                            <TabsContent value="technical" className="mt-4">
                              <Card>
                                <CardHeader>
                                  <CardTitle>Technical Analysis</CardTitle>
                                </CardHeader>
                                <CardContent className="space-y-4">
                                  <div className="space-y-2">
                                    <h3 className="font-semibold">Exploit Technique</h3>
                                    <p>{selectedExploit.technique}</p>
                                  </div>
                                  <div className="space-y-2">
                                    <h3 className="font-semibold">Detailed Analysis</h3>
                                    <p className="whitespace-pre-line">{mockAnalysis[selectedExploit.id].technicalDetails}</p>
                                  </div>
                                  <div className="space-y-2">
                                    <h3 className="font-semibold">Audit Status</h3>
                                    <p>Audited by: {selectedExploit.auditedBy}</p>
                                  </div>
                                </CardContent>
                              </Card>
                            </TabsContent>

                            <TabsContent value="timeline" className="mt-4">
                              <Card>
                                <CardHeader>
                                  <CardTitle>Incident Timeline</CardTitle>
                                </CardHeader>
                                <CardContent>
                                  <p className="whitespace-pre-line">{mockAnalysis[selectedExploit.id].timeline}</p>
                                </CardContent>
                              </Card>
                            </TabsContent>

                            <TabsContent value="lessons" className="mt-4">
                              <Card>
                                <CardHeader>
                                  <CardTitle>Lessons Learned</CardTitle>
                                </CardHeader>
                                <CardContent>
                                  <p className="whitespace-pre-line">{mockAnalysis[selectedExploit.id].lessons}</p>
                                </CardContent>
                              </Card>
                            </TabsContent>

                            <TabsContent value="recommendations" className="mt-4">
                              <Card>
                                <CardHeader>
                                  <CardTitle>Security Recommendations</CardTitle>
                                </CardHeader>
                                <CardContent>
                                  <p className="whitespace-pre-line">{mockAnalysis[selectedExploit.id].recommendations}</p>
                                </CardContent>
                              </Card>
                            </TabsContent>
                          </>
                        )}
                      </Tabs>
                    </ScrollArea>
                  </div>
                ) : (
                  <div className="text-center p-12">
                    <p className="text-muted-foreground">
                      Select an incident from the table above to view detailed analysis
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </main>
      </div>
    </div>
  );
};

export default ExploitHistory;
